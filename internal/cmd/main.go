package main

import (
	"github.com/gdamore/tcell/v2"
	"github.com/rivo/tview"
)

func main() {
	app := tview.NewApplication()

	// –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å
	header := tview.NewTextView().
		SetText(" Weatherminal        2024-05-01  12:34   [Moscow]   [S][L][Q] ").
		SetTextAlign(tview.AlignCenter).
		SetDynamicColors(true)

	// –û—Å–Ω–æ–≤–Ω–∞—è –ø–æ–≥–æ–¥–∞
	weatherBox := tview.NewTextView().
		SetText("  ‚òÄÔ∏è  –Ø—Å–Ω–æ, +18¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ +17¬∞C)\n  –í–ª–∞–∂–Ω–æ—Å—Ç—å: 45%   –í–µ—Ç–µ—Ä: 3 –º/—Å   –î–∞–≤–ª–µ–Ω–∏–µ: 755 –º–º —Ä—Ç. —Å—Ç.").
		SetTextAlign(tview.AlignLeft)

	// –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω–µ–π (—Ç–∞–±–ª–∏—Ü–∞)
	forecast := tview.NewTable().
		SetBorders(false)
	days := []string{"–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç"}
	icons := []string{"‚òÄÔ∏è", "üåß", "‚òÅÔ∏è", "‚òÄÔ∏è", "üå¶"}
	temps := []string{"+18", "+15", "+16", "+19", "+17"}
	for i, day := range days {
		forecast.SetCell(0, i, tview.NewTableCell(day).SetAlign(tview.AlignCenter))
		forecast.SetCell(1, i, tview.NewTableCell(icons[i]).SetAlign(tview.AlignCenter))
		forecast.SetCell(2, i, tview.NewTableCell(temps[i]).SetAlign(tview.AlignCenter))
	}
	forecast.SetFixed(1, 0)

	// –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏
	footer := tview.NewTextView().
		SetText(" [F]orecast  [H]istory  [Fav]orites  [S]ettings  [Q]uit ").
		SetTextAlign(tview.AlignCenter).
		SetDynamicColors(true)

	// –ö–æ–º–ø–æ–Ω–æ–≤–∫–∞
	mainFlex := tview.NewFlex().SetDirection(tview.FlexRow).
		AddItem(header, 1, 0, false).
		AddItem(weatherBox, 3, 0, false).
		AddItem(tview.NewBox().SetBorder(false), 1, 0, false). // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
		AddItem(forecast, 5, 0, false).
		AddItem(tview.NewBox().SetBorder(false), 1, 0, false). // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
		AddItem(footer, 1, 0, false)

	// –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ (–º–æ–∫–∏)
	app.SetInputCapture(func(event *tcell.EventKey) *tcell.EventKey {
		switch event.Rune() {
		case 'q', 'Q':
			app.Stop()
		case 's', 'S':
			header.SetText(" [–ù–∞—Å—Ç—Ä–æ–π–∫–∏] (–º–æ–∫-—ç–∫—Ä–∞–Ω)  [Q]uit ")
		case 'f', 'F':
			header.SetText(" [–ü—Ä–æ–≥–Ω–æ–∑] (–º–æ–∫-—ç–∫—Ä–∞–Ω)  [Q]uit ")
		case 'h', 'H':
			header.SetText(" [–ò—Å—Ç–æ—Ä–∏—è] (–º–æ–∫-—ç–∫—Ä–∞–Ω)  [Q]uit ")
		case 'l', 'L':
			header.SetText(" [–°–º–µ–Ω–∞ –≥–æ—Ä–æ–¥–∞] (–º–æ–∫-—ç–∫—Ä–∞–Ω)  [Q]uit ")
		}
		return event
	})

	if err := app.SetRoot(mainFlex, true).EnableMouse(true).Run(); err != nil {
		panic(err)
	}
}
